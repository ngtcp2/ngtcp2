name: build

on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
        compiler: [gcc, clang]
        buildtool: [autotools, cmake]

    steps:
    - uses: actions/checkout@v2
    - name: Linux setup
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install \
          g++-10 \
          clang-10 \
          autoconf \
          automake \
          autotools-dev \
          libtool \
          pkg-config \
          libcunit1-dev \
          libssl-dev \
          libev-dev \
          cmake \
          cmake-data
    - name: MacOS setup
      if: runner.os == 'macOS'
      run: |
        brew install libev cunit autoconf automake pkg-config libtool
    - name: Setup clang (Linux)
      if: runner.os == 'Linux' && matrix.compiler == 'clang'
      run: |
        echo 'CC=clang-10' >> $GITHUB_ENV
        echo 'CXX=clang++-10' >> $GITHUB_ENV
    - name: Setup clang (MacOS)
      if: runner.os == 'macOS' && matrix.compiler == 'clang'
      run: |
        echo 'CC=clang' >> $GITHUB_ENV
        echo 'CXX=clang++' >> $GITHUB_ENV
    - name: Setup gcc
      if: runner.os == 'Linux' && matrix.compiler == 'gcc'
      run: |
        echo 'CC=gcc-10' >> $GITHUB_ENV
        echo 'CXX=g++-10' >> $GITHUB_ENV
    - name: Build OpenSSL
      run: |
        ./ci/build_openssl.sh
    - name: Build GnuTLS
      run: |
        ./ci/build_gnutls.sh
    - name: Build BoringSSL
      run: |
        ./ci/build_boringssl.sh
    - name: Build nghttp3
      run: |
        ./ci/build_nghttp3.sh
    - name: Setup environment variables
      run: |
        PKG_CONFIG_PATH="$PWD/openssl/build/lib/pkgconfig:$PWD/nghttp3/build/lib/pkgconfig:$PWD/gnutls-3.7.2/build/lib/pkgconfig:$PWD/nettle-3.6/build/lib64/pkgconfig"
        LDFLAGS="$EXTRA_LDFLAGS -Wl,-rpath,$PWD/openssl/build/lib -Wl,-rpath,$PWD/nettle-3.6/build/lib64"
        BORINGSSL_CFLAGS="-I$PWD/boringssl/include/"
        BORINGSSL_LIBS="-L$PWD/boringssl/build/ssl -lssl -L$PWD/boringssl/build/crypto -lcrypto"

        echo 'PKG_CONFIG_PATH='"$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo 'LDFLAGS='"$LDFLAGS" >> $GITHUB_ENV
        echo 'BORINGSSL_CFLAGS='"$BORINGSSL_CFLAGS" >> $GITHUB_ENV
        echo 'BORINGSSL_LIBS='"$BORINGSSL_LIBS" >> $GITHUB_ENV
    - name: Enable ASAN
      if: runner.os == 'Linux'
      run: |
        asanflags="-fsanitize=address,undefined -fno-sanitize-recover=undefined"

        LDFLAGS="$LDFLAGS $asanflags"
        CFLAGS="$CFLAGS $asanflags -g3"
        CXXFLAGS="$CXXFLAGS $asanflags -g3"

        echo 'LDFLAGS='"$LDFLAGS" >> $GITHUB_ENV
        echo 'CFLAGS='"$CFLAGS" >> $GITHUB_ENV
        echo 'CXXFLAGS='"$CXXFLAGS" >> $GITHUB_ENV
    - name: BoringSSL pthread requirement
      if: runner.os == 'Linux'
      run: |
        BORINGSSL_LIBS="$BORINGSSL_LIBS -pthread"

        echo 'BORINGSSL_LIBS='"$BORINGSSL_LIBS" >> $GITHUB_ENV
    - name: Configure autotools
      if: matrix.buildtool == 'autotools'
      run: |
        autoreconf -i && \
        ./configure --enable-werror \
          --with-openssl --with-gnutls --with-boringssl
    - name: Configure cmake
      if: matrix.buildtool == 'cmake'
      run: |
        cmake $CMAKE_OPTS \
          -DBORINGSSL_LIBRARIES="$BORINGSSL_LIBS" \
          -DBORINGSSL_INCLUDE_DIR="$PWD/boringssl/include/" .
    - name: Build ngtcp2
      run: |
        make
        make check
    - name: Integration test
      run: |
        ./ci/gen-certificate.sh
        NETTLE_PATH=$PWD/nettle-3.6/build/lib64
        for client in client gtlsclient bsslclient; do
          for server in server gtlsserver bsslserver; do
            echo "# $client - $server"
            LD_LIBRARY_PATH=$NETTLE_PATH ./examples/$server localhost 4433 cert/server.key cert/server.crt &
            LD_LIBRARY_PATH=$NETTLE_PATH ./examples/$client localhost 4433 https://localhost/ --exit-on-first-stream-close
            killall -INT $server
            sleep 1
          done
        done

  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Configure cmake
      run: |
        mkdir build
        cd build
        cmake ..
    - name: Build ngtcp2
      run: |
        cmake --build build
